import random
import os
import pickle

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
EMPTY = '‚¨õ'
TREE = 'üå≥'
WATER = 'üåä'
FIRE = 'üî•'
HELICOPTER = 'üöÅ'
HOSPITAL = 'üè•'
CLOUD = '‚òÅÔ∏è '
THUNDER = '‚ö°Ô∏è'

class Game:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.grid = [[EMPTY for _ in range(width)] for _ in range(height)]
        self.helicopter_position = [0, 0]
        self.water_reservoirs = 1
        self.score = 0
        self.lives = 3
        self.tick_count = 0  # –°—á—ë—Ç—á–∏–∫ —Ç–∏–∫–æ–≤ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
        self.hospital_position = self.generate_random_cell()  # –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≥–æ—Å–ø–∏—Ç–∞–ª—è
        self.grid[self.hospital_position[1]][self.hospital_position[0]] = HOSPITAL  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Å–ø–∏—Ç–∞–ª—è

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫ –∏ –¥–µ—Ä–µ–≤—å–µ–≤
        self.generate_rivers()
        self.generate_trees()

        # –ü–æ–¥–∂–∏–≥–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
        self.ignite_random_tree()

    def generate_rivers(self):
        num_rivers = random.randint(1, 3)
        for _ in range(num_rivers):
            river_length = random.randint(3, self.width // 2)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ä–µ–∫–∏
            start_x = random.randint(0, self.width - river_length - 1)
            y_position = random.randint(0, self.height - 1)
            for x in range(start_x, start_x + river_length):
                self.grid[y_position][x] = WATER

    def generate_trees(self):
        num_trees = random.randint(self.width * self.height // 10, self.width * self.height // 5)
        for _ in range(num_trees):
            x, y = self.generate_random_empty_cell()
            self.grid[y][x] = TREE

    def generate_random_empty_cell(self):
        while True:
            x = random.randint(0, self.width - 1)
            y = random.randint(0, self.height - 1)
            if self.grid[y][x] == EMPTY:
                return x, y

    def generate_random_cell(self):
        x = random.randint(0, self.width - 1)
        y = random.randint(0, self.height - 1)
        return x, y

    def ignite_random_tree(self):
        trees_positions = [(y, x) for y in range(self.height) for x in range(self.width) if
                           self.grid[y][x] == TREE]
        if trees_positions:
            tree_to_ignite = random.choice(trees_positions)
            print(f"–î–µ—Ä–µ–≤–æ –∑–∞–≥–æ—Ä–µ–ª–æ—Å—å –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: {tree_to_ignite}")
            self.grid[tree_to_ignite[0]][tree_to_ignite[1]] = FIRE

    def display_grid(self):
        os.system('cls' if os.name == 'nt' else 'clear')
        for row in range(self.height):
            line = ''
            for col in range(self.width):
                if [col, row] == self.helicopter_position:
                    line += HELICOPTER + ' '
                else:
                    line += self.grid[row][col] + ' '
            print(line)
        print(f"üí∞: {self.score} | ‚ù§Ô∏è: {self.lives} | üåä: {self.water_reservoirs}")

    def move_helicopter(self, direction):
        x, y = self.helicopter_position
        new_x, new_y = x, y

        if direction == 'up':
            new_y = max(0, y - 1)
        elif direction == 'down':
            new_y = min(self.height - 1, y + 1)
        elif direction == 'left':
            new_x = max(0, x - 1)
        elif direction == 'right':
            new_x = min(self.width - 1, x + 1)
        # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        if (new_x, new_y) != (x, y):
            self.helicopter_position = [new_x, new_y]

    def check_cell(self):
        x, y = self.helicopter_position  # Correct order
        current_cell_value = self.grid[y][x]

        # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ–¥—ã
        if current_cell_value == WATER:
            print("–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–ø–∞—Å—ã –≤–æ–¥—ã!")
            self.water_reservoirs += 1

        # –¢—É—à–µ–Ω–∏–µ –ø–æ–∂–∞—Ä–∞
        elif current_cell_value == FIRE:
            if self.water_reservoirs > 0:
                print("–í—ã –ø–æ—Ç—É—à–∏–ª–∏ –ø–æ–∂–∞—Ä!")
                self.grid[y][x] = EMPTY
                self.water_reservoirs -= 1
                self.score += 10
                print(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 –æ—á–∫–æ–≤! –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {self.score}")
            else:
                print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã –¥–ª—è —Ç—É—à–µ–Ω–∏—è –ø–æ–∂–∞—Ä–∞.")

        # –ü–æ—Å–µ—â–µ–Ω–∏–µ –≥–æ—Å–ø–∏—Ç–∞–ª—è
        elif current_cell_value == HOSPITAL:
            print("–í—ã –ø–æ—Å–µ—Ç–∏–ª–∏ –≥–æ—Å–ø–∏—Ç–∞–ª—å!")
            heal_cost = 20  # –°—Ç–æ–∏–º–æ—Å—Ç—å –ª–µ—á–µ–Ω–∏—è
            if self.score >= heal_cost:
                self.score -= heal_cost
                self.lives = 3  # –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
                print(f"–í—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ! –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {self.score}")
            else:
                print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –ª–µ—á–µ–Ω–∏—è.")

    def is_valid_position(self, x, y):
        return 0 <= x < self.width and 0 <= y < self.height

    def tick(self):
        self.tick_count += 1

        new_fire_positions = []

        # –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ–≥–Ω—è
        for y in range(self.height):
            for x in range(self.width):
                if self.grid[y][x] == FIRE:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
                    for dy in [-1, 0, 1]:
                        for dx in [-1, 0, 1]:
                            if (dx == 0 and dy == 0) or not self.is_valid_position(x + dx, y + dy):
                                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º—É –∫–ª–µ—Ç–∫—É –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏

                            if self.grid[y + dy][x + dx] == TREE and random.random() < 0.5:  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–≥–æ—Ä–∞–Ω–∏—è
                                print(f"–û–≥–æ–Ω—å –ø–µ—Ä–µ–∫–∏–Ω—É–ª—Å—è –Ω–∞ –¥–µ—Ä–µ–≤–æ –≤ –∫–ª–µ—Ç–∫–µ ({x + dx}, {y + dy})")
                                new_fire_positions.append((x + dx, y + dy))
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –æ—á–∞–≥–∏ –≤–æ–∑–≥–æ—Ä–∞–Ω–∏—è
        for x, y in new_fire_positions:
            self.grid[y][x] = FIRE

        # –ü–æ–≥–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è (–æ–±–ª–∞–∫–∞ –∏ –≥—Ä–æ–∑—ã)
        if self.tick_count % 15 == 0:
            self.generate_clouds()
        if self.tick_count % 30 == 0:
            self.strike_lightning()

        # –†–æ—Å—Ç –¥–µ—Ä–µ–≤—å–µ–≤ (–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
        if self.tick_count % 20 == 0:
            self.grow_trees()

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–≥–æ—Ä–∞–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤ (–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
        if self.tick_count % 25 == 0:
            self.ignite_random_tree()

    def generate_clouds(self):
        x, y = self.generate_random_cell()
        print(f"–í –Ω–µ–±–µ –ø–æ—è–≤–∏–ª–∏—Å—å –æ–±–ª–∞–∫–∞ –≤ —Ä–∞–π–æ–Ω–µ ({x}, {y})")
        self.display_message(f"–í –Ω–µ–±–µ –ø–æ—è–≤–∏–ª–∏—Å—å –æ–±–ª–∞–∫–∞ –≤ —Ä–∞–π–æ–Ω–µ ({x}, {y})")
        self.grid[y][x] = CLOUD  # –û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±–ª–∞–∫–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å

    def strike_lightning(self):
        x, y = self.generate_random_cell()
        print(f"–ú–æ–ª–Ω–∏—è —É–¥–∞—Ä–∏–ª–∞ –≤ –∫–ª–µ—Ç–∫—É ({x}, {y})!")
        self.display_message(f"–ú–æ–ª–Ω–∏—è —É–¥–∞—Ä–∏–ª–∞ –≤ –∫–ª–µ—Ç–∫—É ({x}, {y})!")
        if self.grid[y][x] == TREE:
            print("–î–µ—Ä–µ–≤–æ –∑–∞–≥–æ—Ä–µ–ª–æ—Å—å –æ—Ç –º–æ–ª–Ω–∏–∏!")
            self.display_message("–î–µ—Ä–µ–≤–æ –∑–∞–≥–æ—Ä–µ–ª–æ—Å—å –æ—Ç –º–æ–ª–Ω–∏–∏!")
            self.grid[y][x] = FIRE

    def grow_trees(self):
        for _ in range(random.randint(1, 3)):  # –í—ã—Ä–∞—â–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ä–µ–≤—å–µ–≤ –∑–∞ —Ä–∞–∑
            x, y = self.generate_random_empty_cell()
            self.grid[y][x] = TREE  # –í—ã—Ä–∞—â–∏–≤–∞–µ–º –¥–µ—Ä–µ–≤—å—è —Ç–æ–ª—å–∫–æ –≤ –ø—É—Å—Ç—ã—Ö –∫–ª–µ—Ç–∫–∞—Ö
            print(f"–í—ã—Ä–æ—Å–ª–æ –Ω–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ –≤ –∫–ª–µ—Ç–∫–µ ({x}, {y})")

    def shop(self):
        while True:
            print("\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!")
            print("1. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤—É–∞—Ä –¥–ª—è –≤–æ–¥—ã (10 –æ—á–∫–æ–≤)")
            print("2. –í—ã—Ö–æ–¥ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞")

            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

            if choice == '1':
                cost = 10
                if self.score >= cost:
                    print("–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
                    self.score -= cost
                    self.water_reservoirs += 1
                    print(f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {self.water_reservoirs} —Ä–µ–∑–µ—Ä–≤—É–∞—Ä–æ–≤ –≤–æ–¥—ã.")
                else:
                    print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤!")
            elif choice == '2':
                break
            else:
                print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")

    def save_game(self):
        try:
            with open('savegame.pkl', 'wb') as f:
                pickle.dump(self, f)
            print("–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            self.display_message("–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–≥—Ä—ã: {e}")
            self.display_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–≥—Ä—ã: {e}")

    def load_game(self):
        try:
            with open('savegame.pkl', 'rb') as f:
                loaded_game = pickle.load(f)
                # Update current instance's attributes with loaded attributes
                self.__dict__.update(loaded_game.__dict__)
            print("–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            self.display_message("–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        except FileNotFoundError:
            print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            self.display_message("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É.")
            return False  # –ò–≥—Ä–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä—ã: {e}")
            self.display_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä—ã: {e}")
        return True  # –ò–≥—Ä–∞ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ

    def display_message(self, message):
        print(message)


def main():
    while True:
        print("1. –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É")
        print("2. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–≥—Ä—É")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

        if choice == '1':
            width = int(input("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –ø–æ–ª—è: "))
            height = int(input("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –ø–æ–ª—è: "))
            game = Game(width, height)
            break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –≤—ã–±–æ—Ä–∞
        elif choice == '2':
            #–°–æ–∑–¥–∞–µ–º game object —á—Ç–æ–±—ã –±—ã–ª –∫ —á–µ–º—É –ø—Ä–∏–º–µ–Ω–∏—Ç—å load_game
            width = int(input("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –ø–æ–ª—è: "))
            height = int(input("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –ø–æ–ª—è: "))
            game = Game(width, height)
            if game.load_game():
                break
            else:
                print("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.")
        else:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥.")

    while game.lives > 0:  # –ò–≥—Ä–∞–µ–º, –ø–æ–∫–∞ –µ—Å—Ç—å –∂–∏–∑–Ω–∏
        game.display_grid()

        command = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (w/a/s/d –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è; t –¥–ª—è —Ç–∏–∫–∞; p –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞; save –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è; q –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").lower()

        if command == 'q':
            break

        elif command == 'w':
            game.move_helicopter('up')
            game.check_cell()

        elif command == 's':
            game.move_helicopter('down')
            game.check_cell()

        elif command == 'a':
            game.move_helicopter('left')
            game.check_cell()

        elif command == 'd':
            game.move_helicopter('right')
            game.check_cell()

        elif command == "t":
            game.tick()

        elif command == "p":
            game.shop()

        elif command == 'save':
            game.save_game()

        elif command == 'load':
            game.load_game()

        else:
            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        game.tick() #–¢–∏–∫ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è

    print("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!")

if __name__ == "__main__":
    main()
